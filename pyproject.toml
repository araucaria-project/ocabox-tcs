[tool.poetry]
name = "ocabox-tcs"
version = "0.3.8"
description = "Telescope Control Services for OCABOX Astronomilacl Observatory Server"
authors = ["Mikolaj et.al.", "Claude Code <noreply@anthropic.com>"]
readme = "README.md"
packages = [
    {include = "ocabox_tcs", from = "src"},
    {include = "tcsctl", from = "src"}
]
repository = "https://github.com/araucaria-project/ocabox-tcs"

[tool.poetry.dependencies]
python = "^3.12"
serverish = {version = "^1.4.3", extras = ["messenger"]}  # for NATS
ocabox = {git = "https://github.com/araucaria-project/ocabox.git"}
# CLI dependencies are optional (install with: pip install ocabox-tcs[cli])
typer = {version = "^0.19.2", optional = true}  # CLI framework
rich = {version = "^13.0.0", optional = true}  # For colorful terminal output
textual = {version = "^0.40.0", optional = true}  # For future monitor mode

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
ruff = "^0.13.2"
# CLI dependencies for development
typer = "^0.19.2"
rich = "^13.0.0"

[tool.poetry.scripts]
tcs_process = "ocabox_tcs.launchers.process:main"
tcs_asyncio = "ocabox_tcs.launchers.asyncio:main"
tcsctl = "tcsctl.app:main"

[tool.poetry.extras]
cli = ["typer", "rich", "textual"]  # CLI tools (tcsctl command)

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.black]
line-length = 100
target-version = ['py312']

[tool.ruff]
# Target Python 3.12
target-version = "py312"
line-length = 100

# Don't check these directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    ".eggs",
]

[tool.ruff.lint]
# Select gentle rules that catch real issues (non-annoying for astronomers)
select = [
    "F",   # Pyflakes - real errors (unused imports, undefined names)
    "E4",  # Import-related errors
    "E7",  # Statement errors
    "E9",  # Runtime errors
    "I",   # isort - import sorting (auto-fixable)
    "UP",  # pyupgrade - modern Python syntax (auto-fixable)
    "B",   # flake8-bugbear - bug-prone patterns
]

# Ignore annoying rules
ignore = [
    "E501",   # Line too long (black handles this)
    "B008",   # Function call in argument defaults (common in decorators)
    "B904",   # raise from - often not needed in simple code
]

# Allow auto-fixing
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Tests can have unused imports, fixtures, etc.
"tests/**/*.py" = ["F401", "F811"]
# Examples should be simple and clear
"src/ocabox_tcs/services/examples/*.py" = ["B"]

[tool.ruff.lint.isort]
# Use black-compatible import sorting
force-single-line = false
lines-after-imports = 2
